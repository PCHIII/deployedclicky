{"version":3,"sources":["components/Header/Header.js","components/Jumbotron/Jumbotron.js","components/PictureCard/PictureCard.js","components/Footer/Footer.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","onClick","resetGame","currentScore","topScore","Jumbotron","class","PictureCard","id","src","image","alt","Footer","GameContainer","state","pictures","console","log","forEach","picture","clicked","shuffle","setState","handlePictureClick","alert","renderWinMessage","this","picturesJson","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","map","i","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65c962a1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n    \n      <div className=\"navbar navbar-expand-lg p-3 bg-primary text-white\">\n        <div className=\"col-4 header-items\">\n          <button type=\"button\" onClick={props.resetGame} className=\"reload-link btn btn-dark btn-lg\">\n           START GAME\n        </button>\n        </div>\n        <div className=\"col-4 header-items text-center\">\n          <span>Click a Cheerleader to Score!!</span>\n        </div>\n        <div className=\" header-items nav-item ml-auto mr-2\">\n          <span className=\"scores\"> Your Score: <span className=\"num\"> {props.currentScore} </span> <span className='divide pl-3 pr-3'>| </span> Top Score: <span className=\"num\"> {props.topScore}</span>\n          </span>\n        </div>\n      </div>\n    \n);\n\nexport default Header;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = props => (\r\n    <div className=\"jumbotron text-white bg-dark d-flex col-12\">\r\n        <div className=\"container col-3\">\r\n        <span class=\"fa fa-star fa-lg blue  pr-4\"></span>\r\n        <span class=\"fa fa-star fa-lg pr-4\"></span>\r\n        <span class=\"fa fa-star fa-lg blue  pr-4\"></span>\r\n        <span class=\"fa fa-star fa-lg pr-4\"></span>\r\n        <span class=\"fa fa-star fa-lg blue  pr-4\"></span>\r\n        </div>\r\n        <span>Click on a Girl to Score 1 Point!  Don't hit on the same Girl twice! (12 Points Wins!)</span>\r\n        <div className=\"container col-3\">\r\n        <span class=\"fa fa-star fa-lg blue pl-4\"></span>\r\n        <span class=\"fa fa-star fa-lg pl-4\"></span>\r\n        <span class=\"fa fa-star fa-lg blue pl-4\"></span>\r\n        <span class=\"fa fa-star fa-lg pl-4\"></span>\r\n        <span class=\"fa fa-star fa-lg blue pl-4\"></span>\r\n       </div>\r\n    </div>\r\n)\r\nexport default Jumbotron;","import React from \"react\";\nimport \"./PictureCard.css\";\n\n\nconst PictureCard = props => (\n    \n    <div className=\"col-2 girl-container p-2\" onClick={() => props.onClick(props.id)}>\n        <img src={props.image} className=\"girl shadow-lg mb-3 mt-3\" alt=\"Cowboy Cheerleader\" />\n    </div>\n    \n)\n\nexport default PictureCard;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = props => (\r\n    <footer class=\"footer bg-primary fixed-bottom\">\r\n    <div class=\"container text-center p-2\">\r\n      <span class=\"text\">Built with React<i class=\"fab fa-react pl-1\"></i></span>\r\n    </div>\r\n  </footer>\r\n)\r\nexport default Footer;","import React, { Component } from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport Jumbotron from \"./Jumbotron/Jumbotron\";\r\nimport picturesJson from \"../pictures.json\";\r\nimport PictureCard from \"./PictureCard\";\r\nimport Footer from \"./Footer/Footer\";\r\n\r\nclass GameContainer extends Component {\r\n    state = {\r\n        currentScore: 0,\r\n        topScore: 0,\r\n        pictures: []\r\n    }\r\n\r\n    componentWillMount() {\r\n        const pictures = this.shuffle(picturesJson);\r\n        this.setState({ pictures });\r\n    }\r\n\r\n    // randomize shuffle\r\n    shuffle(array) {\r\n        let currentIndex = array.length;\r\n        let temporaryValue;\r\n        let randomIndex;\r\n\r\n        // elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // switch with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    // Reloads page and randomizes picture order when clicking \"Start Game\" button\r\n    resetGame = () => {\r\n        console.log(\"reloaded!\");\r\n        let pictures = [...this.state.pictures];\r\n        pictures.forEach(picture => picture.clicked = false);\r\n        pictures = this.shuffle(pictures);\r\n        this.setState({\r\n            currentScore: 0,\r\n            pictures\r\n        })\r\n    };\r\n\r\n// render lose\r\n\r\n    handlePictureClick = id => {\r\n        if (!this.state.pictures[id].clicked) {\r\n            console.log(id);\r\n            let pictures = [...this.state.pictures];\r\n            pictures[id].clicked = true;\r\n            console.log(pictures[id]);\r\n            pictures = this.shuffle(pictures);\r\n            this.setState({\r\n                pictures,\r\n                currentScore: this.state.currentScore + 1,\r\n                topScore: this.state.currentScore + 1 > this.state.topScore ? this.state.currentScore + 1 : this.state.topScore\r\n            });\r\n        } else {\r\n            alert(\"You already clicked her, please try again.\");\r\n            this.resetGame();\r\n        }\r\n\r\n    }\r\n\r\n    // show win alert\r\n    renderWinMessage = () => {\r\n        if (this.state.topScore === 12) {\r\n           \r\n                alert(\"You win!\")\r\n             \r\n        }\r\n    }\r\n\r\n// show score calculations in header\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* Renders scores and reload function in header */}\r\n                <Header \r\n                    currentScore={this.state.currentScore}\r\n                    topScore={this.state.topScore}\r\n                    resetGame={this.resetGame}\r\n                />\r\n                <Jumbotron />\r\n                {this.state.pictures.map((picture, i) => <PictureCard\r\n                    image={picture.image}\r\n                    key={picture.id}\r\n                    id={i}\r\n                    onClick={this.handlePictureClick}\r\n                />)}\r\n            <Footer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default GameContainer;","import React from 'react';\nimport GameContainer from \"./components/GameContainer\";\n\n\nconst App = () => <GameContainer />;\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}